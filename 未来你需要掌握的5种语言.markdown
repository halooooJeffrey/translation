# 未来你需要掌握的5种编程语言

我们已经来到了编程世界的十字路口。十年前，程序员们热衷动态语言，对于我们中很多人来说，即使这些动态语言使编程更加简单，但是也仅有一点点的狂热，不过这些动态语言一点也不介意，现如今，我们将这些新老工具结合起来开发软件，这就容易产生了困惑：到底学哪些语言可以让我们更有竞争力呢？

在讨论哪些语言在未来几年更受欢迎之前，先来看看这些语言不同的地方。

-----

## 静态语言 vs 动态语言

说到动态语言，“动态”一词是指语言中变量类型可变。当你写代码声明一个变量，动态语言允许变量的数据类型在运行时变化，这些语言不是“静态”或者“强制类型”的。C++和Java这样的语言是强类型的语言，而JavaScript，PHP和Perl是动态语言。

C++中声明一个变量，你需要提供它将要存储的数据的类型（例如整型，浮点型或者字符串类型）。如果你打算用这个变量存储另一种类型的数据，那么编译器就会报错，从而不会继续编译程序。Java同样也会出现这样的问题。

但是JavaSCript却可以让你在程序运行的时候改变变量类型。事实上，用JavaScript声明一个变量时不用指定类型，当你声明好一个变量后，你可以存储一个整型数据，之后也可以存储一个字符串类型的数据代替之前的整型数据。

虽然最近几年动态语言十分火热，但是这个概念大约50年前就有的了。

----

## 函数式语言

随着火热的动态语言而来的还有函数式语言。函数式语言能够凭借函数自身存储变量，也可以像参数一样传递给其他语言。现在很多语言都在一定程度上支持函数式编程。例如C++，可以通过传递函数指针来实现，然而，其他语言例如JavaScript能更容易地将一个函数作为一个对象。基于这个事实，人们认为C++不是一种函数式编程语言，而JavaScript是函数式编程语言。Haskell通常被看作最好的函数式语言。

----

## 垃圾回收

理论上，如果你代码写正确了，就不应该有任何bug。这听起来很美好？但是当你和很多程序员共同完成一个庞大的项目时，一种bug总是会出现：内存泄漏。当你为一个变量分配了空间，使用完以后却忘记释放变量申请的空间时会发生内存泄漏。如果一个程序有很多地方没有释放申请的空间，那么运行几小时，几天，几周或者更长时间后，内存的使用会不断地增加，直到系统奔溃。要是真发生了，很多人会都会觉得太倒霉了。

理论上，当你使用完变量就释放它申请的空间就不会发生这样的事。很简单，对吧。但是仍然有人打破这个规则，一部分原因是有时候释放空间不是那么容易。你写了一个链表，这个链表又传递给别人写的一个函数，这时候链表中的某些成员就要拷贝到另一个链表当中，但是原始的调用函数并不知道拷贝发生了，那么原始的调用函数应该释放内存空间吗？这经常不是很清晰，所以语言发明者提出了一个代替的方案：当你使用完变量之后就不再使用它，操作系统会发现这块内存不再使用了就会清理释放这块内存空间。这就叫做垃圾回收机制。这是很多新的编程语言的一个重要特性。这个思想很美好，它能使程序员工作变得简单，从而将精力集中在创造伟大的软件上。

现在我要告诉你们其实有很多种垃圾回收机制：一种是操作系统定期地扫描内存，寻找不再使用的内存空间；一种是操作系统标记了每个变量，只要变量不再使用了，就会释放它的内存。从技术上来说。后一种不是严格意义上的垃圾回收机制，它被认为是“引用计数”，但是效果和前一种是一样的。

---

## 虚拟机

Java出现在80年代中叶，人们发现它不像C++一样马上编译成汇编语言。而是编译成字节码。当运行的时候，操作系统就会调用一个虚拟机去执行这个字节码，直到这时才会编译成汇编代码。当它第一次出现的时候，人们总是抱怨它有点慢，但是现在这不再是个问题。很多语言运行时都会调用一个虚拟机，包括Java和C#。现在这些语言制定了标准使它们变得快速。

---

## 编程语言

什么语言是你应该学的呢？我们会告诉你们接下来几年在工作中需求大的语言，包括他们的示例代码。很多都不是新的语言。另外，我们也会提到第六种语言，不像其他5种语言那样重要，但也值得一提。

### JavaScript，HTML5和CSS3

从技术上说，HTML5不是一种语言。但是它可以和CSS3，JavaScript共同完成基于Web的软件应用开发。不要误解了，并不是你能创造真实的能在网页浏览器中运行的软件应用。这伟大之处就在于你的应用能够在不同设备中运行，包括移动设备。几年前，例如Facebook就用HTML5创建了他们的移动应用程序。不幸的是，在当时，他们有点超前了。技术还不是很完善，他们不得不回去用本机代码重写应用程序。但是两年后，浏览器终于实现了HTML5技术。需要JavaScript技术的工作也越来越多。如果你想你编程生涯的未来能够得到保证，就必须得学这门技术。（注：很多公司也以Node.js的形式使用服务端的JavaScript）

> *JavaScript Example*
> 
这个例子说明了你怎么能将一个函数作为参数传递给另一个函数。我创造了一个函数，将它存储在一个变量中，然后将这个变量传给setTimeout函数。这里有很多JavaScript的资源：一份很好的清晰的指南，[请到这个网站](https://developer.mozilla.org/en-US/) 。一份很好的教程，[请到这个网站](http://learn.jquery.com/javascript-101/)。                                     
>
```
var mufunc = function() {
    alert('hi');
};
setTimeout(myfunc, 2000);
```

---

### C# ###

微软在15年前创造了类似于Java的C#语言。自从那时候，C#平台就增加了好几倍。语言的语法很像Java（同时也具有C++的特征）。使用C#编程最好的工具就是Visual Studio。Visual Studio有很多高价的版本，也有免费的Express版本。

C#是一种强类型的语言，它在虚拟机中运行。起初的版本很少支持函数式编程，但是大约2006年，微软做出了改变，加入了集中函数式编程的特性。C#的虚拟机框架也有垃圾回收机制。

> *C# Example*
>
这个例子是一个叫做Program的类包括了一个叫Main的类函数。到程序开始运行时调用Main函数。代码创建了一个叫做x的强类型的整型变量，并给它赋值。学习更多C#知识：[请到这个网站](http://msdn.microsoft.com/en-us/vstudio/hh341490.aspx)。
>
```
using System;
class Program{
    static void Mian(){
        int x = 1000;
        Console.WriteLine(x);
    }
}
```

---

### Java

Java快有20年的历史了，它还在不断的成长和成熟。在2004年，我的一个合作伙伴称它是一个“玩具语言”。早先它经历了成长的痛苦，现在已经不再是一个玩具语言了。它能在网站和数据库方面发挥巨大的作用，很多开源的办公套装也是用Java写的。语言本身不会有太大变化了，但它的未来会继续美好。

Java是一种强类型的语言，它在虚拟机中运行，也有垃圾回收机制。虽然它不是函数式语言，但也有函数式编程的特性。

>
*Java Example*

> Java和C#在很多方面很相似。这里我们创建了一个包括main函数的类，程序开始运行时它就会被调用。就像C#的例子一样，我们也创建了一个强类型的整形变量，然后打印它的内容。继续学习Java：[官方文档](http://docs.oracle.com/javase/tutorial/java/)。
>
```
public class HelloWorld{
	public static void main(String[] args) {
		int x = 1000;
		System.out.printIn(x);
	}
}
```
---

### PHP

PHP是一种很容易使用的通用语言。语言的语法和Java,C++有相似之处。简单的方面是，它能在网页中嵌入可改变的文本。举个例子，你有一个网页，网页中包含了打印当前日期的PHP代码，那么浏览器展示这张网页的时候就会在相应PHP代码的位置显示日期。但是PHP不仅仅可以在网页上打印文本，它包含很多库用来做很多事，从在数据库中读取和存储数据（你可以认为其他的任何数据库）到处理科学计算，处理文本等方面。PHP的未来是光明的，很多工作需要使用PHP。

PHP是一种运行在虚拟机中的动态语言（然而，感谢Facebook主导的项目，能有一种编译器能将PHP代码转化成C++代码，然后再编译）。从2009年开始，PHP也支持了函数式编程。

> *PHP Example*
>
这是嵌入在HTML文档中的PHP代码。PHP代码设置了时区是洛杉矶时区，然后打印挡墙实践。PHP代码将会被它的输出替代。因此最后网页会显示“Hello!The current time is”，紧接着是当前的时间。[你可以从这个网站学习PHP](php.net)。
>
```
<html>
<body>
Hello!The current time is
<?php
	date_default_timezone_set('America/Los_Angeles');
	echo(strftime('%c'));
?>
</body>
</html>
```
---

### Swift

现在来说一下一种标志性的语言，那就是苹果公司开发的Swift。通常，我不会建议人们去学习刚刚出来的语言。但是这次不同，这是我们总是在谈论的苹果公司开发的，你可以使用这种新语言去开发iOS应用。事实上，很多迹象表明，Swift是从事iOS开发的未来（注意，也有另一种完全不同的叫Swift的编程语言）。Swift的语法很像JavaScript,但是没有JavaScript的分号和圆括号。

Swift是一种强类型的语言，在运行时也会有垃圾回收机制。

>*Swift Example*
>
这份代码创建了一个叫做str的字符串类型的变量，虽然我没有为这个变量声明类型，但是语言是强制类型，编译器通过等号右边的语句做出判断我存放的是一个字符串，就会给我的变量分配一个字符串类型。然后下一行代码是打印字符串里的内容。[从苹果的网站学习更多有关Swift内容](https://developer.apple.com/swift/)
>
```
var str = "Hello, World!"
printIn(str)
```

---

## 值得一提的语言

### Erlang

Erlang是一种古老的语言，由Erricson的工程师在1986年发明的。起初打算在通讯领域使用它，但是后来演变成了一种通用语言，处理并发性的基于云的高性能计算。人们使用它开发出了一些很伟大的软件，例如CouchDB，Riak。这个语言和其他任何语言看起来不太一样，它有一些奇怪陌生的处理字符串的方式，但是这很容易学习。

你应该学Erlang吗？我之所以提到它是因为它用在一些独特的场合中。没有很多工作是需要Erlang的。但是，如果你精通它（我的意思是精通，而不是了解），那么你就很可能得到一份很好的工作。这是一次交易：你需要花费很多精力去学习Erlang，但是同样地，你将会得到丰厚的回报。

> *Erlang Example*

>我将用一个现成的Erlang代码来举例。这个例子来自[这篇博客](http://egarson.blogspot.com/2008/03/real-erlang-hello-world.html)，解释了一个复杂的“hello world”的例子。记住，Erlang是一门复杂的语言。如果你有勇气去学习这门语言，那么请看一下前面提到的那篇博客，还有这个[网站](http://learnyousomeerlang.com)。
>
```
-module(hello).
-export([start/0]).
start() ->
	spawn(fun() -> loop() end).
loop() ->
	receive
		hello ->
		io:format("Hello, World!~n"),
		loop();
	goodbye ->
	ok
```

---

## 结论

需要编程的职位将会不断地增长，不会出现工作紧缺的现象。而获得这样的工作关键是学习一门正确的技术。而学习JavaScript，C#，Java，PHP（甚至C++，我没有列出）是正确的。如果你想开始学习Swift，那么你将会看到接下来几年会出现很多工作机会。如果你想学习一些功能强大的编程，那么就去学Erlang，虽然你不会马上得到一份Erlang的工作。不管你学习哪种技术，要保持思考，学习，这样就会精通。


## 附注

谢谢所有人深刻地评论，我想发表一下对类型问题的看法。当然，你们是正确的，将静态类型看做和强类型不同。所以现在阐明（为了以后不再对评论进行解释）：在以上的文章中，我描绘一门语言是“强类型“的，我本应该说它是“静态类型”，我不应该说它们是同样的意思。我认为，以下两条评论很好地总结了这两者的不同：

Blingo说：基本上，动态语言不会在编译时进行类型检查；在运行时对类型是否发生改变不会做出任何措施。有些语句看起来想描述转化，甚至C++通过使用dynamic_cast在运行时改变类型，但是这些语言是静态语言。

Matthew说：动态语言暗示了一个变量能储存任何类型的数据：但是强类型和静态类型不同。强类型语言系统会阻止自动转化成其他类型，例如JavaScript。











